doctype html
html
    head
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
        link(rel='stylesheet', href='vendor/bootstrap/css/bootstrap.min.css')
        link(rel='stylesheet', href='stylesheets/style.css')
        script(type='text/javascript', src='https://www.gstatic.com/charts/loader.js')
        script(type='text/javascript').
    body
        nav.navbar.navbar-expand-lg.navbar-dark.navbar-custom.fixed-top
            a.navbar-brand(href='/') Medical Imaging
            button.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbarNavDropdown', aria-controls='navbarNavDropdown', aria-expanded='false', aria-label='Toggle navigation')
                span.navbar-toggler-icon
            #navbarNavDropdown.collapse.navbar-collapse
                ul.navbar-nav.mr-auto
                    li.nav-item.dropdown
                        a#navbarDropdownMenuClinicalExaminations.nav-link.dropdown-toggle(href='/clinicalExaminationsLogSheet', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')
                            | Clinical Examinations
                        .dropdown-menu(aria-labelledby='navbarDropdownMenuClinicalExaminations')
                            a.dropdown-item(href='/clinicalExaminationsLogSheet') Clinical Examination Log Sheet
                            a.dropdown-item(href='/clinicalExaminationsTotal') Total
                            a.dropdown-item(href='/clinicalExaminationsCategory') Category
                            a.dropdown-item(href='/clinicalExaminationsSubcategory') Sub-category
                    li.nav-item.dropdown
                        a#navbarDropdownMenuClinicalHours.nav-link.dropdown-toggle(href='/clinicalHoursLogSheet', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')
                            | Clinical Hours
                        .dropdown-menu(aria-labelledby='navbarDropdownMenuClinicalHours')
                            a.dropdown-item(href='/clinicalHoursLogSheet') Clinical Hours Log Sheet
                            a.dropdown-item(href='/clinicalHoursTotal') Total
                            a.dropdown-item(href='/clinicalHoursMonth') Month
                    li.nav-item
                        a.nav-link(href='/lepAssessments') LEP Assessments
                    li.nav-item
                        a.nav-link(href='/quarterlyProgressReports') Quarterly Progress Reports


                span.navbar-text
                    #authorize_button(style='display: none;') Authorize
                    #signout_button(style='display: none;') Sign Out

        block content
        .container#errorContainer
         .alert.alert-warning.alert-dismissible.collapse(role='alert' id='alert')
            |  No data found
        // Footer
        footer.py-4.bg-black
            .container
                p.m-0.text-center.text-white.small Copyright Â© Your Website 2018
    script(type='text/javascript').
        // Client ID and API key from the Developer Console
        var CLIENT_ID = '310700130630-1h7cr7kv0s4kmf7u03so3c7fit7nja00.apps.googleusercontent.com';
        var API_KEY = 'AIzaSyBQjjLVjQyL9lv2KxBSMh2quYfJIgjOHeI';
        // Array of API discovery doc URLs for APIs used by the quickstart
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest", "https://sheets.googleapis.com/$discovery/rest?version=v4"];
        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        var SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';


        var authorizeButton = document.getElementById('authorize_button');
        var signoutButton = document.getElementById('signout_button');
        var googleAuth;
        /**
         *  On load, called to load the auth2 library and API client library.
         */
        function handleClientLoad() {
            gapi.load('client:auth2', initClient);
        }
        /**
         *  Initializes the API client library and sets up sign-in state
         *  listeners.
         */
        function initClient() {
            gapi.client.init({
                apiKey: API_KEY,
                clientId: CLIENT_ID,
                discoveryDocs: DISCOVERY_DOCS,
                scope: SCOPES
            }).then(function () {
                // Listen for sign-in state changes.
                googleAuth = gapi.auth2.getAuthInstance();
                googleAuth.isSignedIn.listen(updateSigninStatus);
                // Handle the initial sign-in state.
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
            });
        }
        /**
         *  Called when the signed in status changes, to update the UI
         *  appropriately. After a sign-in, the API is called.
         */
        function updateSigninStatus(isSignedIn) {
            $('#alert').hide();
            if (isSignedIn) {
                authorizeButton.style.display = 'none';
                signoutButton.style.display = 'block';
                var email = googleAuth.currentUser.get().getBasicProfile().getEmail();
                var upiResp = email.split("@")[0];
                //var upiResp = "xx";
                var result=false;
                // Load Charts and the chart packages.
                google.charts.load('current', {'packages': ['corechart']});
                //If it's the home page then render the banner
                if($('#banner').length>0){
                    $.ajax({
                        url: 'files/database.csv',
                        dataType: 'text',
                        cache: false,
                        success: function (data) {
                            let array = data.toString().split("\n");
                            for (let i in array) {
                                let arrayItem = array[i].split(',');
                                if (arrayItem[0] === upiResp) {
                                    result = true
                                    var bannerURL = getBanner(arrayItem[1]);
                                    $('#banner').css('background-image', "url('" + bannerURL + "')");
                                }
                            }
                        },
                        error: function (error) {
                            showAlert(error);
                        }
                    })
                //If it is not the homepage, render other elements
                }else {

                    if ($('#lepAssessmentsContainer').length > 0) {
                        listFiles("name contains 'LEP " + upiResp + "' and mimeType= 'application/pdf'",'#lepList',"#lepAssessmentsContainer")
                    } else if ($('#quarterlyProgressReportsContainer').length > 0) {
                        listFiles("(name contains 'SSE " + upiResp + "' or name contains 'QPR " + upiResp + "') and mimeType= 'application/pdf'", '#quarterlyProgressReportsList', "#quarterlyProgressReportsContainer")
                    }else if ($('.contentContainer')[0]) {
                        google.charts.setOnLoadCallback(getClinicalLogBook(upiResp, document.getElementsByClassName('contentContainer')[0].id));
                    }
                }

            } else {
                authorizeButton.style.display = 'block';
                signoutButton.style.display = 'none';
                showAlert("Please Login")

            }
        }

        //get banner by modality
        function getBanner(modality){
              switch (modality){
                  case 'MRI':
                      return '../images/MRIBanner.jpg';
                  case 'Ultrasound':
                      return '../images/UltrasoundBanner.jpg';
                  case 'Mammography':
                      return '../images/MammographyBanner.jpg';
                  case 'Nuclear Medicine':
                      return '../images/NuclearMedicineBanner.jpg';
                  default:
                      return '../images/MedicalImaging.jpg'
              }
        }
        // count appearance

        function getExaminationTotalChartData(arr) {
            var a = [], b = [], prev;
            a.push('Type');
            b.push('All Examinations')
            arr.sort();
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] !== prev) {
                    a.push(arr[i]);
                    b.push(1);
                } else {
                    b[b.length - 1]++;
                }
                prev = arr[i];
            }

            var chartData = []
            chartData.push(a);
            chartData.push(b)

            return chartData;
        }

        function getExaminationCategoryChartData(arr) {

            arr.sort()
            var prev;
            var category = [['Category', 'Observed', 'Performed independently', 'Performed assisted']];

            for (var i = 0; i < arr.length; i++) {

                if (arr[i][0] !== prev) {
                    if (arr[i][1] === 'Observed') {
                        category.push([arr[i][0], 1, 0, 0]);
                    } else if (arr[i][1] === 'Performed independently') {
                        category.push([arr[i][0], 0, 1, 0]);
                    } else {
                        category.push([arr[i][0], 0, 0, 1]);
                    }

                } else {

                    if (arr[i][1] === 'Observed') {

                        category[category.length - 1][1]++;
                    } else if (arr[i][1] === 'Performed independently') {

                        category[category.length - 1][2]++;
                    } else {

                        category[category.length - 1][3]++;
                    }
                }
                prev = arr[i][0];
            }

            return category;
        }


        function getClinicalHoursChartData(arr, type) {
            var hoursData = [['Type', 'Hours']]
            if (type === 'clinicalHoursTotal') {
                var num = 0;
                for (var i = 0; i < arr.length; i++) {
                    num += Number(arr[i][0])
                }
                hoursData.push(['Total', num])
            } else {
                arr.sort()
                var prev;
                for (var j = 0; j < arr.length; j++) {
                    var date = arr[j][0].split('-', 2);
                    var month = date[0] + "-" + date[1];
                    var hours = Number(arr[j][1])
                    if (month !== prev) {
                        hoursData.push([month, hours])
                    } else {
                        hoursData[hoursData.length - 1][1] += hours;
                    }
                    prev = month;
                }
            }
            return hoursData

        }


        function drawChart(chartData, type) {
            var title = getChartTitle(type);
            var data = google.visualization.arrayToDataTable(chartData);
            var ColumnChart_options = {
                title: title,
                width: '100%',
                height: '100%',
                bar: {groupWidth: "70%"},
                legend: {position: 'top', maxLines: 3},
                isStacked: true
            };

            var columnChart = new google.visualization.ColumnChart(document.getElementById(type));
            columnChart.draw(data, ColumnChart_options);

        }


        function drawTable(chartData) {

            var headContent = '';
            var bodyContent = '';
            $.each(chartData, function (i, x) {

                if (i === 0) {
                    for (var m = 0; m < x.length; m++) {
                        headContent += '<th scope="col">' + x[m] + '</th>';
                    }
                } else {
                    var bodyItem = '<tr><th scope="row">' + x[0] + '</th>';
                    for (var l = 1; l < x.length; l++) {
                        bodyItem += '<td>' + x[l] + '</td>'

                    }
                    bodyItem += '</tr>';
                    bodyContent += bodyItem;
                }


            });


            $("#clinicalTableHead").append(headContent);
            $("#clinicalTableBody").append(bodyContent)
        }

        function getChartTitle(type) {
            switch (type) {
                case 'clinicalExaminationsTotal':
                    return 'Examinations'
                case 'clinicalExaminationsCategory':
                    return 'Examinations(by category)'
                case 'clinicalExaminationsSubcategory':
                    return 'Examinations(by sub-category)'
                case 'clinicalHoursTotal':
                    return 'Total Clinical Hours'
                case 'clinicalHoursMonth':
                    return 'Clinical Hours(by Month)'
                case 'clinicalHoursWeek':
                    return 'Clinical Hours(by Week)'

            }

        }

        function showAlert(message) {
            $('#alert').text(message).show();
        }

        /**
         *  Sign in the user upon button click.
         */
        function handleAuthClick(event) {
            gapi.auth2.getAuthInstance().signIn();
        }
        /**
         *  Sign out the user upon button click.
         */
        function handleSignoutClick(event) {
            gapi.auth2.getAuthInstance().signOut();
        }

        /**
         * get clinicalExaminationLogSheet data.
         */
        function getExaminationLogSheetTotal(fileID,type) {
            gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: fileID,
                range: 'Examination Log!E2:E'
            }).then(function (response) {
                var range = response.result;

                var result = [];
                if (range.values.length > 0) {

                    for (var i = 0; i < range.values.length; i++) {
                        var row = range.values[i];
                        result.push(row[0])
                    }
                    var chartData = getExaminationTotalChartData(result);
                    drawData(chartData, type)

                    $('#newForm').text('Add data').attr('href','https://docs.google.com/forms/d/e/1FAIpQLScXRFxkyH6eDQdeR0sm2YHILvQY1ydSFrDLdd1EDSrdjqdDkA/viewform?usp=sf_link');
                } else {

                    showAlert('No data found')
                }
            }, function (response) {
                showAlert('Error: ' + response.result.error.message)
            });
        }

        function getExaminationLogSheetCategory(fileID, type) {
            gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: fileID,
                range: 'Examination Log!D2:E'
            }).then(function (response) {
                var range = response.result;

                if (range.values.length > 0) {

                    if (type === 'clinicalExaminationsCategory') {
                        for (var i = 0; i < range.values.length; i++) {
                            range.values[i][0] = range.values[i][0].split(':')[0]
                        }
                    }
                    var chartData = getExaminationCategoryChartData(range.values);

                   drawData(chartData,type)
                } else {

                    showAlert('No data found')
                }
            }, function (response) {
                showAlert('Error: ' + response.result.error.message)
            });
        }

        /**
         * get clinicalHourLogSheet data.
         */
        function getHourLogSheet(fileID, type) {
            var range;
            if (type === "clinicalHoursTotal") range = 'Hours Log!B2:B'; else range = 'Hours Log!A2:B'
            gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: fileID,
                range: range
            }).then(function (response) {

                var range = response.result;

                if (range.values.length > 0) {
                    var chartData = getClinicalHoursChartData(range.values, type);

                   drawData(chartData,type)

                } else {
                    showAlert('No data found')
                }
            }, function (response) {
                showAlert('Error: ' + response.result.error.message)
            });
        }

        function drawData(chartData,type){
        $('#clinicalChartContainer').show();
            drawChart(chartData, type);
            drawTable(chartData)
        }


        function getClinicalLogBookLink(fileID, type) {

            gapi.client.drive.files.get({
                fileId: fileID,
                fields: 'webViewLink'
            }).then(function (response) {
                var formLink='';
                $('#clinicalLogBookContainer').show();
                $('#' + type).attr('src', JSON.parse(response.body).webViewLink.replace('edit', 'preview')).show();
                if(type==='clinicalHoursLogSheet') {formLink='https://docs.google.com/forms/d/e/1FAIpQLSdbSC_CQDOD0H_CEucYeZp3B80AnrvoqxkrSoyw601GPpDSDQ/viewform?usp=sf_link';}
                else {formLink='https://docs.google.com/forms/d/e/1FAIpQLSdbSC_CQDOD0H_CEucYeZp3B80AnrvoqxkrSoyw601GPpDSDQ/viewform?usp=sf_link';}
                var newForm="<a id='newForm' target='_blank' role='button' class='btn btn-primary' href="+formLink+ ")>Add Record</a>";
                $('#newFormContainer').append(newForm);

            }, function (response) {
                showAlert('Error: ' + response.result.error.message)
            });

        }

        /**
         * get clinical log book.
         */
        function getClinicalLogBook(upiResp, type) {


            if (type === 'clinicalHoursLogSheet' || type === 'clinicalHoursTotal' || type === 'clinicalHoursMonth') {

                gapi.client.drive.files.list({
                    q: "name='Clinical Hours Log Book(" + upiResp + ")'",
                    'name': "nextPageToken, files(id, name)"
                }).then(function (response) {
                    var files = response.result.files;
                    if (files.length) {
                        console.log(files)
                        var fileID = files[0].id;
                        switch (type) {
                            case 'clinicalHoursLogSheet':

                                getClinicalLogBookLink(fileID, type)
                                break
                            default:
                                getHourLogSheet(fileID, type)
                                break

                        }

                    } else {

                        showAlert('No files found')
                    }
                });

            } else {

                gapi.client.drive.files.list({
                    q: "name='Clinical Examination Log Book(" + upiResp + ")'",
                    'name': "nextPageToken, files(id, name)"
                }).then(function (response) {
                    var files = response.result.files;
                    if (files.length) {

                        var fileID = files[0].id;
                        switch (type) {
                            case 'clinicalExaminationsLogSheet':
                                getClinicalLogBookLink(fileID, type)
                                break
                            case 'clinicalExaminationsTotal':
                                getExaminationLogSheetTotal(fileID,type)
                                break
                            default:
                                getExaminationLogSheetCategory(fileID, type)
                                break

                        }

                    } else {
                        showAlert('No files found')
                    }
                });

            }

        }

        /**
         * get clinical pdf files.
         */

        function listFiles(q,id,containerName){
            gapi.client.drive.files.list({
                q: q,
                'name': "nextPageToken, files(id, name)"
            }).then(function (response) {
                var files = response.result.files;
                if (files.length) {
                    $(containerName).show();
                    for (var i = 0; i < files.length; i++) {
                        var url = "https://drive.google.com/a/aucklanduni.ac.nz/file/d/" + files[i].id + "/view?usp=drivesdk";
                        var link = '<a href=' + url + ' class="list-group-item list-group-item-action" target="_blank">  ' +
                            '<img class="pdf-icon" src="/images/pdf.jpg" alt="...">'
                            + files[i].name + '</a>'
                        $(id).append(link)
                    }

                } else {

                    showAlert('No files found')
                }
            });
        }

    script(async='', defer='', src='https://apis.google.com/js/api.js', onload='this.onload=function(){};handleClientLoad()', onreadystatechange="if (this.readyState === 'complete') this.onload()")
    script(src='vendor/jquery/jquery.min.js')
    script(src='vendor/bootstrap/js/bootstrap.bundle.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js', integrity='sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49', crossorigin='anonymous')



