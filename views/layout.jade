doctype html
html
    head
      meta(charset='utf-8')
      meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
      link(rel='stylesheet', href='vendor/bootstrap/css/bootstrap.min.css')
      link(rel='stylesheet', href='stylesheets/style.css')
      script(type='text/javascript', src='https://www.gstatic.com/charts/loader.js')
      script(type='text/javascript').
    body
        nav.navbar.navbar-expand-lg.navbar-dark.navbar-custom.fixed-top
          a.navbar-brand(href='/') Medical Imaging
          button.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbarNavDropdown', aria-controls='navbarNavDropdown', aria-expanded='false', aria-label='Toggle navigation')
            span.navbar-toggler-icon
          #navbarNavDropdown.collapse.navbar-collapse
            ul.navbar-nav.mr-auto
              li.nav-item
                  a.nav-link(href='/clinicalLogBook') Clinical Log Book
              li.nav-item.dropdown
                  a#navbarDropdownMenuClinicalExaminations.nav-link.dropdown-toggle(href='/', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')
                      | Clinical Examinations
                  .dropdown-menu(aria-labelledby='navbarDropdownMenuClinicalExaminations')
                      a.dropdown-item(href='/clinicalExaminationsTotal') Total
                      a.dropdown-item(href='/clinicalExaminationsCategory') Category
                      a.dropdown-item(href='/clinicalExaminationsSubcategory') Sub-category
              li.nav-item.dropdown
                  a#navbarDropdownMenuClinicalHours.nav-link.dropdown-toggle(href='/', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false')
                      | Clinical Hours
                  .dropdown-menu(aria-labelledby='navbarDropdownMenuClinicalHours')
                      a.dropdown-item(href='/clinicalHoursTotal') Total
                      a.dropdown-item(href='/clinicalHoursMonth') Month
                      a.dropdown-item(href='/clinicalHoursWeek') Week
              li.nav-item
                a.nav-link(href='/lepAssessments') LEP Assessments
              li.nav-item
                a.nav-link(href='/clinicalSummary') Clinical Summary

            span.navbar-text
              #authorize_button(style='display: none;') Authorize
              #signout_button(style='display: none;') Sign Out

        block content

        // Footer
        footer.py-5.bg-black
            .container
                p.m-0.text-center.text-white.small Copyright Â© Your Website 2018
    script(type='text/javascript').
        // Client ID and API key from the Developer Console
        var CLIENT_ID = '310700130630-1h7cr7kv0s4kmf7u03so3c7fit7nja00.apps.googleusercontent.com';
        var API_KEY = 'AIzaSyBQjjLVjQyL9lv2KxBSMh2quYfJIgjOHeI';
        // Array of API discovery doc URLs for APIs used by the quickstart
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest", "https://sheets.googleapis.com/$discovery/rest?version=v4"];
        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        var SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';


        var authorizeButton = document.getElementById('authorize_button');
        var signoutButton = document.getElementById('signout_button');
        var googleAuth;
        /**
         *  On load, called to load the auth2 library and API client library.
         */
        function handleClientLoad() {
            gapi.load('client:auth2', initClient);
        }
        /**
         *  Initializes the API client library and sets up sign-in state
         *  listeners.
         */
        function initClient() {
            gapi.client.init({
                apiKey: API_KEY,
                clientId: CLIENT_ID,
                discoveryDocs: DISCOVERY_DOCS,
                scope: SCOPES
            }).then(function () {
                // Listen for sign-in state changes.
                googleAuth = gapi.auth2.getAuthInstance();
                googleAuth.isSignedIn.listen(updateSigninStatus);
                // Handle the initial sign-in state.
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
            });
        }
        /**
         *  Called when the signed in status changes, to update the UI
         *  appropriately. After a sign-in, the API is called.
         */
        function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                authorizeButton.style.display = 'none';
                signoutButton.style.display = 'block';
                var email = googleAuth.currentUser.get().getBasicProfile().getEmail();
                var upiResp = email.split("@")[0];

                // Load Charts and the corechart and barchart packages.
                google.charts.load('current', {'packages': ['corechart']});

                // Draw the pie chart and bar chart when Charts is loaded.
                if(document.getElementById('clinicalLogBookContainer')){
                   getClinicalLogBook(upiResp,'clinicalLogBookLink') ;
                    return;
                }
                if(document.getElementById('clinicalExaminationContainer')){
                       google.charts.setOnLoadCallback(getClinicalLogBook(upiResp,document.getElementsByClassName('chartContainer')[0].id));
                       return;
                }
                if(document.getElementById('clinicalHoursContainer')){
                    google.charts.setOnLoadCallback(getClinicalLogBook(upiResp,'clinicalHours'));
                    return;
                }

                if (document.getElementById('lepAssessmentsContainer')) {
                       google.charts.setOnLoadCallback(listLepAssessments(upiResp));
                       return;
                }

                if(document.getElementById('clinicalSummaryContainer')){

                }


            } else {
                authorizeButton.style.display = 'block';
                signoutButton.style.display = 'none';

            }
        }
        // count appearance

        function getChartData(arr) {
            var a = [], b = [], prev;
            a.push('Type');
            b.push('All Examinations')
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] !== prev) {
                    a.push(arr[i]);
                    b.push(1);
                } else {
                    b[b.length - 1]++;
                }
                prev = arr[i];
            }

            var chartData = []
            for (var j = 0; j < a.length; j++) {
                chartData.push([a[j], b[j]])
            }


            return chartData;
        }


        function getExaminationTotalChartData(arr){
            var a = [], b = [], prev;
            a.push('Type');
            b.push('All Examinations')
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] !== prev) {
                    a.push(arr[i]);
                    b.push(1);
                } else {
                    b[b.length - 1]++;
                }
                prev = arr[i];
            }

            var chartData = []
            chartData.push(a);
            chartData.push(b)

            return chartData;
        }

        function getExaminationCategoryChartData(arr) {

            var a = [], b = [], prev;
            a.push('Type');
            b.push('All Examinations')
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] !== prev) {
                    a.push(arr[i]);
                    b.push(1);
                } else {
                    b[b.length - 1]++;
                }
                prev = arr[i];
            }

            var chartData = []
            chartData.push(a);
            chartData.push(b)

            return chartData;
        }



        function drawExaminationChart(chartData,type) {

            var data = google.visualization.arrayToDataTable(chartData);
            var ColumnChart_options = {
                title: 'Examination Category Total',
                width: '100%',
                height: '100%',
                legend:{position:'top',maxLines:3},
                isStacked:true
            };

            var piechart = new google.visualization.ColumnChart(document.getElementById(type));
            piechart.draw(data, ColumnChart_options);


        }



        /**
         *  Sign in the user upon button click.
         */
        function handleAuthClick(event) {
            gapi.auth2.getAuthInstance().signIn();
        }
        /**
         *  Sign out the user upon button click.
         */
        function handleSignoutClick(event) {
            gapi.auth2.getAuthInstance().signOut();
        }

        /**
         * get clinicalExaminationLogSheet data.
         */
        function getExaminationLogSheetTotal(fileID) {
            gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: fileID,
                range: 'Examination Log!E2:E'//'Examination Log!D2:E'
            }).then(function (response) {
                var range = response.result;

                var result = [];
                if (range.values.length > 0) {

                    for (i = 0; i < range.values.length; i++) {
                        var row = range.values[i];
                        result.push(row[0])
                    }
                    var chartData = getExaminationTotalChartData(result);
                    drawExaminationChart(chartData,'clinicalExaminationsTotal');
                } else {
                    //appendPre('No data found.');
                }
            }, function (response) {
                //appendPre('Error: ' + response.result.error.message);
            });
        }

        function getExaminationLogSheetCategory(fileID) {
            gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: fileID,
                range: 'Examination Log!D:E'
            }).then(function (response) {
                var range = response.result;
                if (range.values.length > 0) {
                    for (i = 1; i < range.values.length; i++) {
                        range.values[i][0]=range.values[i][0].split(':')[0]
                    }

                    var chartData = getExaminationTotalChartData(range.values);
                    drawExaminationChart(chartData,'clinicalExaminationsCategory');
                } else {
                    //appendPre('No data found.');
                }
            }, function (response) {
                //appendPre('Error: ' + response.result.error.message);
            });
        }

        /**
        * get clinicalHourLogSheet data.
        */
        function getHourLogSheet(fileID) {
            gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: fileID,
                range: 'Examination Hours Log!B2:E'//'Examination Log!D2:E'
            }).then(function (response) {
                var range = response.result;

                var result = [];
                if (range.values.length > 0) {

                    for (i = 0; i < range.values.length; i++) {
                        var row = range.values[i];

                        result.push(row[0])

                    }
                    drawChart(result);
                } else {
                    //appendPre('No data found.');
                }
            }, function (response) {
                //appendPre('Error: ' + response.result.error.message);
            });
        }

        function getClinicalLogBookLink(fileID) {

            gapi.client.drive.files.get({
                fileId: fileID,
                fields: 'webViewLink'
            }).then(function (response) {

                var sheetIframe =document.getElementById('sheetIframe');
                sheetIframe.src = JSON.parse(response.body).webViewLink.replace('edit', 'preview');

            }, function (response) {
                //appendPre('Error: ' + response.result.error.message);
            });

        }

        /**
         * get clinical log book.
         */
        function getClinicalLogBook(upiResp,type) {

            var fileName = 'Clinical Log Book(' + upiResp + ') Test'

            gapi.client.drive.files.list({
                q: "name='" + fileName + "'",
                'name': "nextPageToken, files(id, name)"
            }).then(function (response) {
                var files = response.result.files;
                if (files) {
                     var fileID=files[0].id;
                    switch (type){
                        case 'clinicalLogBookLink':
                            getClinicalLogBookLink(fileID)
                            break
                        case 'clinicalExaminationsTotal':
                            getExaminationLogSheetTotal(fileID)
                            break
                        case 'clinicalExaminationsCategory':
                            getExaminationLogSheetCategory(fileID)
                            break
                        case 'clinicalHours':
                            break




                    }

                } else {
                    //appendPre('No files found.');
                }
            });
        }

        /**
         * get clinical log book.
         */
        function listLepAssessments(upiResp) {

            var fileName = 'Clinical Log Book(' + upiResp + ') Test'
            gapi.client.drive.files.list({
                q: "name='" + fileName + "'",
                'name': "nextPageToken, files(id, name)"
            }).then(function (response) {
                var files = response.result.files;
                if (files) {
                    var file = files[0];


                } else {
                    //appendPre('No files found.');
                }
            });
        }


    script(async='', defer='', src='https://apis.google.com/js/api.js', onload='this.onload=function(){};handleClientLoad()', onreadystatechange="if (this.readyState === 'complete') this.onload()")
    script(src='vendor/jquery/jquery.min.js')
    script(src='vendor/bootstrap/js/bootstrap.bundle.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js', integrity='sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49', crossorigin='anonymous')



